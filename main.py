import os
import logging
import time
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from googletrans import Translator
from gtts import gTTS

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = '8186888870:AAF4WaEsgE3qUxN4nPgOQxzol0AouJqHSw8'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
if not os.path.exists('img'):
    os.makedirs('img')
if not os.path.exists('voice'):
    os.makedirs('voice')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
translator = Translator()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
button_photo = KeyboardButton('üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ')
button_translate = KeyboardButton('üî§ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç')
button_select_lang = KeyboardButton('üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫')
button_help = KeyboardButton('üÜò –ü–æ–º–æ—â—å')
keyboard.add(button_photo, button_translate)
keyboard.add(button_select_lang, button_help)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_language = {}

# –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
photo_counter = {}
voice_counter = {}

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤
available_languages = {
    'en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
    'ru': '–†—É—Å—Å–∫–∏–π',
    'es': '–ò—Å–ø–∞–Ω—Å–∫–∏–π',
    'de': '–ù–µ–º–µ—Ü–∫–∏–π',
    'fr': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_language[message.from_user.id] = 'en'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–µ —Ñ–æ—Ç–æ –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ —è–∑—ã–∫ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º.",
        reply_markup=keyboard
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    tts = gTTS(text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.", lang='ru')
    tts.save("voice_message.ogg")
    with open("voice_message.ogg", 'rb') as voice:
        await bot.send_voice(chat_id=message.chat.id, voice=voice)
    os.remove("voice_message.ogg")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    help_text = (
        "üÜò *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:*\n\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üì∑ *–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ*, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ.\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üî§ *–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç*, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º "
        "–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º.\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üåê *–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫*, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞.\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üÜò *–ü–æ–º–æ—â—å*, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "‚Ä¢ –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
        "  - /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.\n"
        "  - /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏.\n"
    )
    await message.reply(help_text, parse_mode='Markdown', reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.message_handler(lambda message: message.text == 'üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ')
async def prompt_photo(message: types.Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ.")

@dp.message_handler(lambda message: message.text == 'üî§ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç')
async def prompt_text(message: types.Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º.")

@dp.message_handler(lambda message: message.text == 'üÜò –ü–æ–º–æ—â—å')
async def handle_help_button(message: types.Message):
    await send_help(message)

@dp.message_handler(lambda message: message.text == 'üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫')
async def select_language(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏
    inline_kb = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton(text=lang_name, callback_data=f"lang_{lang_code}")
        for lang_code, lang_name in available_languages.items()
    ]
    inline_kb.add(*buttons)
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=inline_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('lang_'))
async def process_language_selection(callback_query: types.CallbackQuery):
    lang_code = callback_query.data[5:]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ —è–∑—ã–∫–∞
    user_language[callback_query.from_user.id] = lang_code  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    lang_name = available_languages.get(lang_code, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫')
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫: {lang_name}", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–º –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
@dp.message_handler(content_types=['photo'])
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if user_id not in photo_counter:
        photo_counter[user_id] = 1
    else:
        photo_counter[user_id] += 1

    photo = message.photo[-1]
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    downloaded_file = await bot.download_file(file_path)
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    file_name = f'img/photo_{user_id}_{photo_counter[user_id]}.jpg'
    with open(file_name, 'wb') as f:
        f.write(downloaded_file.getvalue())
    await message.reply("–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
@dp.message_handler(content_types=['text'])
async def handle_text(message: types.Message):
    text = message.text
    if text in ['üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ', 'üî§ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç', 'üÜò –ü–æ–º–æ—â—å', 'üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫']:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        return

    user_id = message.from_user.id
    target_lang = user_language.get(user_id, 'en')  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    try:
        translated = translator.translate(text, dest=target_lang)
    except Exception as e:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        return

    translated_text = translated.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥
    await message.reply(
        f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {available_languages.get(target_lang, '–≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫')}:\n{translated_text}",
        reply_markup=keyboard
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if user_id not in voice_counter:
        voice_counter[user_id] = 1
    else:
        voice_counter[user_id] += 1

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
    max_length = 200
    text_parts = [translated_text[i:i + max_length] for i in range(0, len(translated_text), max_length)]

    for index, part in enumerate(text_parts):
        # –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
        try:
            tts = gTTS(text=part, lang=target_lang)
        except Exception as e:
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return

        voice_file_name = f'voice/voice_{user_id}_{voice_counter[user_id]}_{index}.ogg'
        tts.save(voice_file_name)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        with open(voice_file_name, 'rb') as voice:
            await bot.send_voice(chat_id=message.chat.id, voice=voice)

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(voice_file_name)

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    voice_counter[user_id] += len(text_parts) - 1  # –£–∂–µ —É–≤–µ–ª–∏—á–∏–ª–∏ –Ω–∞ 1 —Ä–∞–Ω–µ–µ

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
